#!/usr/bin/env node

var program = require('commander');
var Gagarin = require('../lib/gagarin');
var path = require('path');
var fs = require('fs');

program
  .version(require('../package.json').version)
  .usage('[debug] [options] [files]')
  .option('-A, --async-only', "force all tests to take a callback (async)")
  .option('-c, --colors', 'force enabling of colors')
  .option('-C, --no-colors', 'force disabling of colors')
  .option('-G, --growl', 'enable growl notification support')
  .option('-R, --reporter <name>', 'specify the reporter to use', 'spec')
  .option('-S, --sort', "sort test files")
  .option('-b, --bail', "bail after first test failure")
  .option('-d, --debug', "enable node's debugger, synonym for node --debug")
  .option('-g, --grep <pattern>', 'only run tests matching <pattern>')
  //.option('-gc', '--expose-gc', 'expose gc extension')
  .option('-i, --invert', 'inverts --grep matches')
  .option('-s, --slow <ms>', '"slow" test threshold in milliseconds [75]')
  .option('-t, --timeout <ms>', 'set test-case timeout in milliseconds [2000]')
  //.option('-u, --ui <name>', 'specify user-interface (bdd|tdd|exports)', 'bdd')
  //.option('-V, --verbose', 'run with verbose mode with logs from client/server', false)
  .option('-w, --webdriver <url>', 'webdriver url [default: http://127.0.0.1:9515]', 'http://127.0.0.1:9515')
  .option('-M, --dont-wait-for-meteor', 'do not wait until meteor is loaded')
  .option('-m, --meteor-load-timeout <ms>', 'meteor load timeout [2000]', 2000)

program.name = 'gagarin';

program.parse(process.argv);

program.pathToApp = path.resolve('.');

var gagarin = new Gagarin(program);

var pathToTests = program.args[0] || path.join(program.pathToApp, 'tests', 'gagarin');

if (!fs.existsSync(pathToTests)) {
  console.warn('looking for tests in ' + pathToTests + ' but this path does not exist');
  process.exit(1);
}

if (fs.lstatSync(pathToTests).isDirectory()) {
  fs.readdirSync(pathToTests).forEach(function (file) {
    var pathToFile = path.join(pathToTests, file);
    if (path.extname(file) !== '.js') {
      return;
    }
    if (fs.lstatSync(pathToFile).isDirectory()) {
      return;
    }
    gagarin.addFile(pathToFile);
  });
} else {
  gagarin.addFile(pathToTests);
}

gagarin.run(function (failedCount) {
  if (failedCount > 0) {
    process.exit(1);
  }
  process.exit(0);
});


